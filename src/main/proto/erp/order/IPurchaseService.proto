syntax = "proto3";
import "erp/order/PurchaseEntity.proto";
import "BaseEntity.proto";
package b2b.erp.order;

option java_multiple_files = true;
option java_package = "com.usoft.b2b.external.erp.order.api.protobuf";
option java_outer_classname = "IPurchaseServiceProto";

service IPurchaseRestService {

    //将ERP的采购订单写到平台 -restAPI /erp/purchase, method:post, type:json
    rpc savePurchaseList(SavePurchaseListReq) returns (SavePurchaseListResp) { }
    //买家ERP获取平台的订单回复 -restAPI /erp/purchase/reply, method:get, type:json
    rpc getPurchaseReplyList(GetPurchaseReplyListReq) returns (GetPurchaseReplyListResp) {}
    //保存买家ERP主动回复的记录到平台 -restAPI /erp/purchase/reply, method:post, type:json
    rpc savePurchaseReplyList(SavePurchaseReplyListReq) returns (SavePurchaseReplyListResp) {}
    //平台的订单回复传到ERP之后，修改平台里面的回复记录的状态 -restAPI /erp/purchase/reply/back, method:post, type:string
    rpc updatePurchaseReplyStatus(UpdatePurchaseReplyStatusReq) returns (UpdatePurchaseReplyStatusResp) {}
    //买家结案、反结案采购单后，传到平台 -restAPI /erp/purchase/end, method:post, type:json
    rpc updatePurchaseDetailEnd(UpdatePurchaseDetailEndReq) returns (UpdatePurchaseDetailEndResp) {}
    //买家ERP获取平台的打印状态 -restAPI /erp/purchase/print, method:get, type:json
    rpc getMessageLogList(GetMessageLogListReq) returns (GetMessageLogListResp) {}
    //平台的打印记录传到ERP之后，修改平台里面的打印记录的传输状态 -restAPI /erp/purchase/print/back, method:POST, type:string
    rpc updateMessageLogStatus(UpdateMessageLogStatusReq) returns (UpdateMessageLogStatusResp) {}
    //将未上传的采购明细上传到平台 -restAPI /erp/purchase/item, method:POST, type:json
    rpc savePurchaseDetailList(SavePurchaseDetailListReq) returns (SavePurchaseDetailListResp) {}
}

//保存erp采购单到平台 请求参数
message SavePurchaseListReq {
    repeated Purchase data = 1; //采购单集合
}

//保存erp采购单到平台 响应参数
message SavePurchaseListResp {
    RespHeader respHeader = 1; // 响应体
    repeated Purchase data = 2; //带b2b_id的采购单集合
}

//买家ERP获取平台的订单回复 请求参数
message GetPurchaseReplyListReq {
}

//买家ERP获取平台的订单回复 响应参数
message GetPurchaseReplyListResp {
    RespHeader respHeader = 1; // 响应体
    repeated PurchaseReply data = 2; //采购订单回复记录集合
}

//保存买家ERP主动回复的记录到平台 请求参数
message SavePurchaseReplyListReq {
    repeated PurchaseReply data = 1; //采购订单回复记录集合
}

//保存买家ERP主动回复的记录到平台 响应参数
message SavePurchaseReplyListResp {
    RespHeader respHeader = 1; // 响应体
}

//平台的订单回复传到ERP之后，修改平台里面的回复记录的状态 请求参数
message UpdatePurchaseReplyStatusReq {
    string idStr = 1; //保存进erp的PurchaseReply的b2b_id
}

//平台的订单回复传到ERP之后，修改平台里面的回复记录的状态 响应参数
message UpdatePurchaseReplyStatusResp {
    RespHeader respHeader = 1; // 响应体
}

//买家结案、反结案采购单后，传到平台 请求参数
message UpdatePurchaseDetailEndReq {
    repeated PurchaseDetailEnd data = 1; //ERP系统的采购订单明细（针对结案、反结案）
}

//买家结案、反结案采购单后，传到平台 响应参数
message UpdatePurchaseDetailEndResp {
    RespHeader respHeader = 1; // 响应体
}

//买家ERP获取平台的打印状态 请求参数
message GetMessageLogListReq {
}

//买家ERP获取平台的打印状态 响应参数
message GetMessageLogListResp {
    RespHeader respHeader = 1; // 响应体
    repeated MessageLog data = 2;//打印信息集合
}

//平台的打印记录传到ERP之后，修改平台里面的打印记录的传输状态 请求参数
message UpdateMessageLogStatusReq {
    string idStr = 1; //保存进erp的MessageLog的b2b_id
}

//平台的打印记录传到ERP之后，修改平台里面的打印记录的传输状态 响应参数
message UpdateMessageLogStatusResp {
    RespHeader respHeader = 1; // 响应体
}

//将未上传的采购明细上传到平台 请求参数
message SavePurchaseDetailListReq {
    repeated Purchase.PurchaseDetail data = 1; //未上传采购明细
}

//将未上传的采购明细上传到平台 响应参数
message SavePurchaseDetailListResp {
    RespHeader respHeader = 1; // 响应体
}